;   PE7
;   ===

;   Description: Text in context

;   "This programming exercise illustrates a general process for
;    which SNOBOL is well suited. We will call it the context-
;    identification process. Imagine that some character of 
;    special significance is embedded in a string in a context
;    delimited by a pair of known markers, say `*` on the left
;    and `$` on the right. We wish to write a program to scan
;    the string for each such significant character and to make
;    a list of the contexts in which it occurs. Two strings are
;    given.
;
;    1. A string `CHLST` that contains a list of these significant
;       characters: `1,3,5,`.
;    2. A data string to be scanned:
;       `*X3X$*5Y$*X1X$*Y5YY$*3Y$*1P$`
;
;
;    For each of the characters in `CHLST` we will form a string
;    that contains the contexts in which the character was
;    embedded. The list for the character `1` will be called
;    `1CTX` (for `1`-contexts), the list for `3` will be called
;    `3CTX`, and so on. In each entry on the list the significant
;    character will be replaced by a blank. Thus, the first entry
;    in `1CTX` should be `X X`. The entries are to be delimited
;    by commas on the right. As soon as each `CTX` list is completed,
;    it is to be printed out. (Possibly you will have difficulty
;    locating the correct left delimiter `*`. If you cannot find
;    a way to do this, glance at the solution given.)"


     chlst = '1,3,5,'
    
     str = '*X3X$*5Y$*X1X$*Y5YY$*3Y$*1P$'

;    Extract each special character to `chr` and replace it with
;    a null string. If this fails, we've exhausted `chlst`, 
;    so jump to label `end`.
l1   chlst arb . chr ',' = ''              :f(end)

;    Make a copy of `str` to process.
     s = str

;    Extract text between the delimiters to `chunk` and replace
;    it with a null string. If this fails, we've exhausted 
;    this copy of `str`, so jump to label `l4.`
l2   s '*' arb . chunk '$' = ''            :f(l4)

;    Replace the current value of `chr` in the extracted text 
;    with a space. If this fails, the extracted text didn't
;    contain the value of `chr`, so jump to label `l2`.
     chunk chr = ' '                       :f(l2)

;    Append the extracted text, with the current value of `chr` 
;    replaced by a space, to the value of a name formed by 
;    concatenating the value of `chr` with the string `CTX`.
;    Jump to label `l2` to continue processing the current copy 
;    of `str`.
l3   $(chr 'CTX') = $(chr 'CTX') chunk ',' :(l2)

;    Print the current value of the name formed by concatenating
;    the value of `chr` with the string `CTX`, then jump to label
;    `l1` to extract the next special character.
l4   output = chr 'CTX: ' $(chr 'CTX')     :(l1)

end

;    Output:
;    ```
;      1CTX: X X, P,
;      3CTX: X X, Y,
;      5CTX:  Y,Y YY,
;    ```
